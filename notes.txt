       @tailrec
        def foldLeft [A, B] (as: List[A], z: B) (f: (B, A) => B): B = {
                as match {
                        case Nil =>
                                z
                        case Cons(x, xs) =>
                                foldLeft (xs, f(z, x)) (f)
                }
        }

        
        def foldRight[A, B] (as: List[A], z: B) (f: (A, B) => B): B = {
                as match {
                        case Nil => z
                        case Cons(x, xs) => f(x, foldRight(xs, z)(f))
                }
        }
        @tailrec
        def foldLeft [A, B] (as: List[A], z: B) (f: (B, A) => B): B = {
                as match {
                        case Nil =>
                                z
                        case Cons(x, xs) =>
                                foldLeft (xs, f(z, x)) (f)
                }
        }

        def appendViaFoldLeft[A] (a1: List[A], a2: List[A]): List[A] = {
                foldLeft (a1, a2) ((x, y) => Cons(y, x))
        }

del all


Break the list out using pattern-matching where there will be a recursive call to `sequence` in the cons case. Alternatively, use the `foldRight` method to take care of the recursion for you.
